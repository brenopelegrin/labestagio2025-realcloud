AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Combined template for VPC infrastructure and static web application deployment.
  This template creates a multi-tier network with VPC, subnets, security groups, and deploys
  a highly-available, scalable web application using EC2 instances in an Auto Scaling Group
  behind an Application Load Balancer.
  **WARNING** You will be billed for the AWS resources created if you create a stack from this template.

Parameters:
  #General:
  NamingPrefix:
    Type: String
    Description: The naming prefix for resources created by this template, and exported values that can be referenced by other stacks.
    Default: WebApp1
    MaxLength: 16
  VPCIPv4CidrBlock:
    Description: VPC CIDR block for IPv4. Default of 10.0.0.0/16 is recommended for testing.
    Type: String
    Default: 10.0.0.0/16
  VPCSubnetIPv4Size:
    Description: Host bit mask length of each subnet, e.g. default of 8 will be a /24 subnet size.
    Type: Number
    Default: 8
  VPCNumberOfIPv4Subnets:
    Description: Number of equally sized IPv4 subnets that will be created within the VPC CIDR block. Default of 256 is recommended for testing.
    Type: Number
    Default: 256
  VPCFlowLogRetention:
    Description: VPC Flow Log retention time in days. Note that VPC Flow Logs will be deleted when this stack is deleted.
    Type: String
    Default: 90
  #ALB #1 Tier:
  ALB1SubnetsEnabled:
    Description: Create subnets and other resources for application load balancer (ALB) tier. False disables the ALB tier completely. 
    Type: String
    AllowedValues:
      - true
      - false
    Default: true
  #App #1 Tier:
  App1SubnetsInternetRoute:
    Description: Application subnets route to the internet through Nat Gateways (IPv4). If set to true then shared tier also must be enabled. 
    Type: String
    AllowedValues:
      - true
      - false
    Default: true
  App1SubnetsPrivateLinkEndpoints:
    Description: VPC Endpoints can be used to access example common AWS services privately within a subnet, instead of via a NAT Gateway. Note for testing purposes a NAT Gateway is more cost effective than enabling endpoint services.
    Type: String
    AllowedValues:
      - true
      - false
    Default: false
  #DB #1 Tier:
  DB1SubnetsEnabled:
    Description: Create subnets and other resources for database (DB) tier. False disables the DB tier completely.
    Type: String
    AllowedValues:
      - true
      - false
    Default: true
  DB1TCPPortNumber:
    Description: TCP/IP port number used in DB tier for Network ACL (NACL). Default is 3306 for MySQL. Examples; 5432 for PostgreSQL, 1433 for SQL Server, , 11211 for Memcache/Elasticache, 6379 for Redis.
    Type: Number
    Default: 3306
  #Shared #1 Tier:
  Shared1SubnetsEnabled:
    Description: Create subnets for shared tier. Set to true when enabling application route to internet parameter as the shared tier contains NAT gateways that allow IPv4 traffic in the application tier to connect to the internet. False disables the shared tier completely.
    Type: String
    AllowedValues:
      - true
      - false
    Default: true
  
  #Application Tier Parameters
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
    Default: t3.micro
    ConstraintDescription: must be a valid EC2 instance type.

  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  ServerCodeUrl:
    Type: String
    Default: https://github.com/brenopelegrin/labestagio2025-realcloud/archive/refs/heads/prod.zip
    AllowedPattern: ^(https?:\/\/)([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$
    ConstraintDescription: URL where server code can be downloaded, such as S3 or GitHub.

  ServerOperationMode:
    Description: The operation mode for the webserver. 1 means no error handling, 2 means error handling, 3 means deep healthcheck.
    Type: Number
    Default: "3"
    MinValue: "1"
    MaxValue: "3"
    ConstraintDescription: must be between 1 and 3.

  ALBSGSource:
    Description: The IP address range that can be used to access the web app
    Type: String
    Default: 0.0.0.0/0
    MinLength: "9"
    MaxLength: "18"
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  Web1AutoScaleDesired:
    Description: The desired number of web instances in auto scaling group
    Type: Number
    Default: "3"
    MinValue: "3"
    MaxValue: "6"
    ConstraintDescription: must be between 3 and 6 EC2 instances.

Conditions:
  #ALB1:
  ALB1Enabled: !Equals [!Ref ALB1SubnetsEnabled, "true"]
  #App1:
  App1SubnetsInternetRouteEnabled: !Equals [!Ref App1SubnetsInternetRoute, "true"]
  App1SubnetsPrivateLinkEndpointsEnabled: !Equals [!Ref App1SubnetsPrivateLinkEndpoints, "true"]
  #DB1:
  DB1Enabled: !Equals [!Ref DB1SubnetsEnabled, "true"]
  #Shared1:
  Shared1Enabled:  !Equals [!Ref Shared1SubnetsEnabled, "true"]

Resources:
  #
  # VPC INFRASTRUCTURE RESOURCES
  #
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCIPv4CidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref NamingPrefix
              - VPC
  VPCFlowLogGroup:
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: Delete
    Properties:
      RetentionInDays: !Ref VPCFlowLogRetention
  VPCFlowLog:
    Type: "AWS::EC2::FlowLog"
    DependsOn: VPCFlowLogGroup
    Properties:
      DeliverLogsPermissionArn: !GetAtt VPCFlowLogRole.Arn
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref VPCFlowLogGroup
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
  VPCFlowLogRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${NamingPrefix}-VPCFlowLog-${AWS::Region}-${VPC}'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: VPCFlowLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}-VPCFlowLogGroup-*'
  IGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref NamingPrefix
              - IGW
  IGWAttach:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW
  InternetRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref InternetRouteTable
  InternetRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref NamingPrefix
              - Public
              - RTB
  #
  #ALB1 Tier:
  #
  ALB1Subnet1:
    Condition: ALB1Enabled
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}-ALB1-a'
      VpcId: !Ref VPC
  ALB1Subnet2:
    Condition: ALB1Enabled
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}-ALB1-b'
      VpcId: !Ref VPC
  ALB1Subnet3:
    Condition: ALB1Enabled
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}-ALB1-c'
      VpcId: !Ref VPC
  ALB1Subnet1RouteToInternet:
    Condition: ALB1Enabled
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - ALB1Subnet1
      - InternetRouteTable
    Properties:
      RouteTableId: !Ref InternetRouteTable
      SubnetId: !Ref ALB1Subnet1
  ALB1Subnet2RouteToInternet:
    Condition: ALB1Enabled
    DependsOn:
      - ALB1Subnet2
      - InternetRouteTable
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref InternetRouteTable
      SubnetId: !Ref ALB1Subnet2
  ALB1Subnet3RouteToInternet:
    Condition: ALB1Enabled
    DependsOn:
      - ALB1Subnet3
      - InternetRouteTable
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref InternetRouteTable
      SubnetId: !Ref ALB1Subnet3
  ALB1NetworkAcl1:
    Condition: ALB1Enabled
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}-ALB1'
  ALB1InFromInternetHTTPAclEntry:
    Condition: ALB1Enabled
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref ALB1NetworkAcl1
      RuleNumber: '50'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '80'
        To: '80'
  ALB1InFromInternetHTTPSAclEntry:
    Condition: ALB1Enabled
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref ALB1NetworkAcl1
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '443'
        To: '443'
  ALB1InNetworkEphemeralVPCAclEntry1:
    Condition: ALB1Enabled
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref ALB1NetworkAcl1
      RuleNumber: '1100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Select [ 11, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      PortRange:
        From: '1024'
        To: '65535'
  ALB1InNetworkEphemeralVPCAclEntry2:
    Condition: ALB1Enabled
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref ALB1NetworkAcl1
      RuleNumber: '1200'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Select [ 12, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      PortRange:
        From: '1024'
        To: '65535'
  ALB1InNetworkEphemeralVPCAclEntry3:
    Condition: ALB1Enabled
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref ALB1NetworkAcl1
      RuleNumber: '1300'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Select [ 13, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      PortRange:
        From: '1024'
        To: '65535'
  ALB1OutNetworkEphemeralAclEntry:
    Condition: ALB1Enabled
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref ALB1NetworkAcl1
      RuleNumber: '1000'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  ALB1OutNetworkHTTPVPCAclEntry1:
    Condition: ALB1Enabled
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref ALB1NetworkAcl1
      RuleNumber: '1100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !Select [ 11, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      PortRange:
        From: '80'
        To: '80'
  ALB1OutNetworkHTTPVPCAclEntry2:
    Condition: ALB1Enabled
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref ALB1NetworkAcl1
      RuleNumber: '1200'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !Select [ 12, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      PortRange:
        From: '80'
        To: '80'
  ALB1OutNetworkHTTPVPCAclEntry3:
    Condition: ALB1Enabled
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref ALB1NetworkAcl1
      RuleNumber: '1300'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !Select [ 13, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      PortRange:
        From: '80'
        To: '80'
  ALB1OutNetworkHTTPSVPCAclEntry1:
    Condition: ALB1Enabled
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref ALB1NetworkAcl1
      RuleNumber: '2100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !Select [ 11, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      PortRange:
        From: '443'
        To: '443'
  ALB1OutNetworkHTTPSVPCAclEntry2:
    Condition: ALB1Enabled
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref ALB1NetworkAcl1
      RuleNumber: '2200'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !Select [ 12, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      PortRange:
        From: '443'
        To: '443'
  ALB1OutNetworkHTTPSVPCAclEntry3:
    Condition: ALB1Enabled
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref ALB1NetworkAcl1
      RuleNumber: '2300'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !Select [ 13, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      PortRange:
        From: '443'
        To: '443'
  ALB1SubnetNetworkAclAssocation1:
    Condition: ALB1Enabled
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref ALB1Subnet1
      NetworkAclId: !Ref ALB1NetworkAcl1
  ALB1SubnetNetworkAclAssocation2:
    Condition: ALB1Enabled
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref ALB1Subnet2
      NetworkAclId: !Ref ALB1NetworkAcl1
  ALB1SubnetNetworkAclAssocation3:
    Condition: ALB1Enabled
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref ALB1Subnet3
      NetworkAclId: !Ref ALB1NetworkAcl1
  #
  #App1 Tier:
  #
  App1Subnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 11, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}-App1-a'
      VpcId: !Ref VPC
  App1Subnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 12, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}-App1-b'
      VpcId: !Ref VPC
  App1Subnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 13, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}-App1-c'
      VpcId: !Ref VPC
  App1RouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
          - Key: Name
            Value: !Join
              - '-'
              - - !Ref NamingPrefix
                - App1
                - RTB1
  App1InternetRoute1:
    Condition: App1SubnetsInternetRouteEnabled
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref Shared1NATGW1
      RouteTableId: !Ref App1RouteTable1
  App1RouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
          - Key: Name
            Value: !Join
              - '-'
              - - !Ref NamingPrefix
                - App1
                - RTB2
  App1InternetRoute2:
    Condition: App1SubnetsInternetRouteEnabled
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref Shared1NATGW2
      RouteTableId: !Ref App1RouteTable2
  App1RouteTable3:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
          - Key: Name
            Value: !Join
              - '-'
              - - !Ref NamingPrefix
                - App1
                - RTB3
  App1InternetRoute3:
    Condition: App1SubnetsInternetRouteEnabled
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref Shared1NATGW3
      RouteTableId: !Ref App1RouteTable3
  App1SubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref App1Subnet1
      RouteTableId: !Ref App1RouteTable1
  App1SubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref App1Subnet2
      RouteTableId: !Ref App1RouteTable2
  App1SubnetRouteTableAssociation3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref App1Subnet3
      RouteTableId: !Ref App1RouteTable3
  App1NetworkAcl1:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}-App1'
  App1InNetworkHTTPAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref App1NetworkAcl1
      RuleNumber: '50'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref VPCIPv4CidrBlock
      PortRange:
        From: '80'
        To: '80'
  App1InNetworkHTTPSAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref App1NetworkAcl1
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref VPCIPv4CidrBlock
      PortRange:
        From: '443'
        To: '443'
  App1InNetworkEphemeralAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref App1NetworkAcl1
      RuleNumber: '150'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  App1OutNetworkHTTPAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref App1NetworkAcl1
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  App1OutNetworkHTTPSAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref App1NetworkAcl1
      RuleNumber: '150'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  App1OutNetworVPCAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref App1NetworkAcl1
      RuleNumber: '200'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !Ref VPCIPv4CidrBlock
      PortRange:
        From: '1'
        To: '65535'
  App1SubnetNetworkAclAssocation1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref App1Subnet1
      NetworkAclId: !Ref App1NetworkAcl1
  App1SubnetNetworkAclAssocation2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref App1Subnet2
      NetworkAclId: !Ref App1NetworkAcl1
  App1SubnetNetworkAclAssocation3:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref App1Subnet3
      NetworkAclId: !Ref App1NetworkAcl1
  #
  # App1 Endpoints
  #
  App1VPCEndpointS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:*'
            Resource: !Sub 'arn:${AWS::Partition}:s3:::*'
      RouteTableIds:
        - !Ref App1RouteTable1
        - !Ref App1RouteTable2
        - !Ref App1RouteTable3
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC
  App1VPCEndpointDynamoDB:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 'dynamodb:*'
            Resource: !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:*'
      RouteTableIds:
        - !Ref App1RouteTable1
        - !Ref App1RouteTable2
        - !Ref App1RouteTable3
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcId: !Ref VPC
  App1EndpointSecurityGroup:
    Condition: App1SubnetsPrivateLinkEndpointsEnabled
    DependsOn: App1Subnet3
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Enable access to endpoints
      SecurityGroupIngress:
        - 
          IpProtocol: "tcp"
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Select [ 11, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
        - 
          IpProtocol: "tcp"
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Select [ 12, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
        - 
          IpProtocol: "tcp"
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Select [ 13, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      SecurityGroupEgress:
        - 
          IpProtocol: tcp
          FromPort: "0"
          ToPort: "65535"
          CidrIp: 0.0.0.0/0
          Description: TCP
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref NamingPrefix
              - Endpoint
      VpcId: !Ref VPC
  App1VPCEndpointec2:
    Condition: App1SubnetsPrivateLinkEndpointsEnabled
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds: 
        - !Ref App1Subnet1
        - !Ref App1Subnet2
        - !Ref App1Subnet3
      SecurityGroupIds: 
        - !Ref App1EndpointSecurityGroup
  App1VPCEndpointec2messages:
    Condition: App1SubnetsPrivateLinkEndpointsEnabled
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2messages'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds: 
        - !Ref App1Subnet1
        - !Ref App1Subnet2
        - !Ref App1Subnet3
      SecurityGroupIds: 
        - !Ref App1EndpointSecurityGroup
  App1VPCEndpointcloudformation:
    Condition: App1SubnetsPrivateLinkEndpointsEnabled
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.cloudformation'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds: 
        - !Ref App1Subnet1
        - !Ref App1Subnet2
        - !Ref App1Subnet3
      SecurityGroupIds: 
        - !Ref App1EndpointSecurityGroup
  App1VPCEndpointlogs:
    Condition: App1SubnetsPrivateLinkEndpointsEnabled
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.logs'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds: 
        - !Ref App1Subnet1
        - !Ref App1Subnet2
        - !Ref App1Subnet3
      SecurityGroupIds: 
        - !Ref App1EndpointSecurityGroup
  App1VPCEndpointmonitoring:
    Condition: App1SubnetsPrivateLinkEndpointsEnabled
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.monitoring'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds: 
        - !Ref App1Subnet1
        - !Ref App1Subnet2
        - !Ref App1Subnet3
      SecurityGroupIds: 
        - !Ref App1EndpointSecurityGroup
  App1VPCEndpointssm:
    Condition: App1SubnetsPrivateLinkEndpointsEnabled
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds: 
        - !Ref App1Subnet1
        - !Ref App1Subnet2
        - !Ref App1Subnet3
      SecurityGroupIds: 
        - !Ref App1EndpointSecurityGroup
  App1VPCEndpointssmmessages:
    Condition: App1SubnetsPrivateLinkEndpointsEnabled
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssmmessages'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds: 
        - !Ref App1Subnet1
        - !Ref App1Subnet2
        - !Ref App1Subnet3
      SecurityGroupIds: 
        - !Ref App1EndpointSecurityGroup
  App1VPCEndpointsecretsmanager:
    Condition: App1SubnetsPrivateLinkEndpointsEnabled
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.secretsmanager'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds: 
        - !Ref App1Subnet1
        - !Ref App1Subnet2
        - !Ref App1Subnet3
      SecurityGroupIds: 
        - !Ref App1EndpointSecurityGroup
  App1VPCEndpointkms:
    Condition: App1SubnetsPrivateLinkEndpointsEnabled
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.kms'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds: 
        - !Ref App1Subnet1
        - !Ref App1Subnet2
        - !Ref App1Subnet3
      SecurityGroupIds: 
        - !Ref App1EndpointSecurityGroup
  #
  # Shared1 Tier:
  #
  Shared1Subnet1:
    Condition: Shared1Enabled
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 21, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}-Shared1-a'
      VpcId: !Ref VPC
  Shared1Subnet2:
    Condition: Shared1Enabled
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 22, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}-Shared1-b'
      VpcId: !Ref VPC
  Shared1Subnet3:
    Condition: Shared1Enabled
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 23, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}-Shared1-c'
      VpcId: !Ref VPC
  Shared1NATGW1:
    Condition: Shared1Enabled
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId:
        Fn::GetAtt:
          - Shared1NAT1EIP
          - AllocationId
      SubnetId:
        Ref: Shared1Subnet1
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}-Shared1-a'
  Shared1NATGW2:
    Condition: Shared1Enabled
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId:
        Fn::GetAtt:
          - Shared1NAT2EIP
          - AllocationId
      SubnetId:
        Ref: Shared1Subnet2
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}-Shared1-b'
  Shared1NATGW3:
    Condition: Shared1Enabled
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId:
        Fn::GetAtt:
          - Shared1NAT3EIP
          - AllocationId
      SubnetId:
        Ref: Shared1Subnet3
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}-Shared1-c'
  Shared1NAT1EIP:
    Condition: Shared1Enabled
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  Shared1NAT2EIP:
    Condition: Shared1Enabled
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  Shared1NAT3EIP:
    Condition: Shared1Enabled
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  Shared1Route1:
    Condition: Shared1Enabled
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref Shared1RouteTable1
  Shared1RouteTable1:
    Condition: Shared1Enabled
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref NamingPrefix
              - Shared
              - RTB1
  Shared1SubnetRouteTableAssociation1:
    Condition: Shared1Enabled
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - Shared1Subnet1
      - Shared1RouteTable1
    Properties:
      RouteTableId: !Ref Shared1RouteTable1
      SubnetId: !Ref Shared1Subnet1
  Shared1Route2:
    Condition: Shared1Enabled
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref Shared1RouteTable2
  Shared1RouteTable2:
    Condition: Shared1Enabled
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref NamingPrefix
              - Shared
              - RTB2
  Shared1SubnetRouteTableAssociation2:
    Condition: Shared1Enabled
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - Shared1Subnet2
      - Shared1RouteTable2
    Properties:
      RouteTableId: !Ref Shared1RouteTable2
      SubnetId: !Ref Shared1Subnet2
  Shared1Route3:
    Condition: Shared1Enabled
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref Shared1RouteTable3
  Shared1RouteTable3:
    Condition: Shared1Enabled
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref NamingPrefix
              - Shared
              - RTB3
  Shared1SubnetRouteTableAssociation3:
    Condition: Shared1Enabled
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - Shared1Subnet3
      - Shared1RouteTable3
    Properties:
      RouteTableId: !Ref Shared1RouteTable3
      SubnetId: !Ref Shared1Subnet3
  Shared1NetworkAcl1:
    Condition: Shared1Enabled
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}-Shared1'
  Shared1InNetworkEphemeralAclEntry1:
    Condition: Shared1Enabled
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Shared1NetworkAcl1
      RuleNumber: '50'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  Shared1InNetworkApp1Entry1:
    Condition: Shared1Enabled
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Shared1NetworkAcl1
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Select [ 11, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      PortRange:
        From: '0'
        To: '65535'
  Shared1InNetworkApp1Entry2:
    Condition: Shared1Enabled
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Shared1NetworkAcl1
      RuleNumber: '150'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Select [ 12, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      PortRange:
        From: '0'
        To: '65535'
  Shared1InNetworkApp1Entry3:
    Condition: Shared1Enabled
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Shared1NetworkAcl1
      RuleNumber: '200'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Select [ 13, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      PortRange:
        From: '0'
        To: '65535'
  Shared1OutNetworkEphemeralAclEntry:
    Condition: Shared1Enabled
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref Shared1NetworkAcl1
      RuleNumber: '50'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  Shared1OutNetworkHTTPAclEntry:
    Condition: Shared1Enabled
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref Shared1NetworkAcl1
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  Shared1OutNetworkHTTPSAclEntry:
    Condition: Shared1Enabled
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref Shared1NetworkAcl1
      RuleNumber: '200'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  Shared1Subnet1NetworkAclAssocation1:
    Condition: Shared1Enabled
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref Shared1Subnet1
      NetworkAclId: !Ref Shared1NetworkAcl1
  Shared1Subnet1NetworkAclAssocation2:
    Condition: Shared1Enabled
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref Shared1Subnet2
      NetworkAclId: !Ref Shared1NetworkAcl1
  Shared1Subnet1NetworkAclAssocation3:
    Condition: Shared1Enabled
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref Shared1Subnet3
      NetworkAclId: !Ref Shared1NetworkAcl1
  #
  #DB1 Tier:
  #
  DB1Subnet1:
    Condition: DB1Enabled
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 31, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}-DB1-a'
  DB1Subnet2:
    Condition: DB1Enabled
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 32, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}-DB1-b'
  DB1Subnet3:
    Condition: DB1Enabled
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 33, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}-DB1-c'
  DB1RouteTable1:
    Condition: DB1Enabled
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
          - Key: Name
            Value: !Join
              - '-'
              - - !Ref NamingPrefix
                - DB1
                - RTB1
  DB1RouteTable2:
    Condition: DB1Enabled
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
          - Key: Name
            Value: !Join
              - '-'
              - - !Ref NamingPrefix
                - DB1
                - RTB2
  DB1RouteTable3:
    Condition: DB1Enabled
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
          - Key: Name
            Value: !Join
              - '-'
              - - !Ref NamingPrefix
                - DB1
                - RTB3
  DB1SubnetRouteTableAssociation1:
    Condition: DB1Enabled
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DB1Subnet1
      RouteTableId: !Ref DB1RouteTable1
  DB1SubnetRouteTableAssociation2:
    Condition: DB1Enabled
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DB1Subnet2
      RouteTableId: !Ref DB1RouteTable2
  DB1SubnetRouteTableAssociation3:
    Condition: DB1Enabled
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DB1Subnet3
      RouteTableId: !Ref DB1RouteTable3
  DB1NetworkAcl1:
    Condition: DB1Enabled
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}-DB1'
  DB1InFromApp1AclEntry1:
    Condition: DB1Enabled
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DB1NetworkAcl1
      RuleNumber: '50'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Select [ 11, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      PortRange:
        From: !Ref DB1TCPPortNumber
        To: !Ref DB1TCPPortNumber
  DB1InFromApp1AclEntry2:
    Condition: DB1Enabled
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DB1NetworkAcl1
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Select [ 12, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      PortRange:
        From: !Ref DB1TCPPortNumber
        To: !Ref DB1TCPPortNumber
  DB1InFromApp1AclEntry3:
    Condition: DB1Enabled
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DB1NetworkAcl1
      RuleNumber: '150'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Select [ 13, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      PortRange:
        From: !Ref DB1TCPPortNumber
        To: !Ref DB1TCPPortNumber
  DB1OutNetworkEphemeralAclEntry1:
    Condition: DB1Enabled
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DB1NetworkAcl1
      RuleNumber: '50'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !Select [ 11, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      PortRange:
        From: '1024'
        To: '65535'
  DB1OutNetworkEphemeralAclEntry2:
    Condition: DB1Enabled
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DB1NetworkAcl1
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !Select [ 12, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      PortRange:
        From: '1024'
        To: '65535'
  DB1OutNetworkEphemeralAclEntry3:
    Condition: DB1Enabled
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref DB1NetworkAcl1
      RuleNumber: '150'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !Select [ 13, !Cidr [ !GetAtt VPC.CidrBlock, !Ref VPCNumberOfIPv4Subnets, !Ref VPCSubnetIPv4Size ]]
      PortRange:
        From: '1024'
        To: '65535'
  DB1SubnetNetworkAclAssocation1:
    Condition: DB1Enabled
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref DB1Subnet1
      NetworkAclId: !Ref DB1NetworkAcl1
  DB1SubnetNetworkAclAssocation2:
    Condition: DB1Enabled
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref DB1Subnet2
      NetworkAclId: !Ref DB1NetworkAcl1
  DB1SubnetNetworkAclAssocation3:
    Condition: DB1Enabled
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref DB1Subnet3
      NetworkAclId: !Ref DB1NetworkAcl1

  #
  # STATIC WEB APP RESOURCES
  #
  DynamoDBServiceMockTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: RecommendationService
      AttributeDefinitions:
        - AttributeName: ServiceAPI
          AttributeType: S
        - AttributeName: UserID
          AttributeType: "N"
      KeySchema:
        - AttributeName: ServiceAPI
          KeyType: HASH
        - AttributeName: UserID
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      SSESpecification:
        SSEEnabled: "true"

  ALB1SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupDescription: Enable HTTP access via port 80 and 443 to the allowed CIDR
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: !Ref ALBSGSource
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          CidrIp: !Ref ALBSGSource
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: "0"
          ToPort: "65535"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref NamingPrefix
              - Load Balancer
      VpcId: !Ref VPC

  ALB1LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: ALB1Enabled
    DependsOn:
      - ALB1Subnet1
      - ALB1Subnet2
      - ALB1Subnet3
      - ALB1SecurityGroup
    Properties:
      SecurityGroups:
        - !Ref ALB1SecurityGroup
      Subnets:
        - !Ref ALB1Subnet1
        - !Ref ALB1Subnet2
        - !Ref ALB1Subnet3

  ALB1Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: ALB1Enabled
    DependsOn:
      - ALB1LoadBalancer
      - ALB1TargetGroup
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALB1TargetGroup
      LoadBalancerArn: !Ref ALB1LoadBalancer
      Port: "80"
      Protocol: HTTP

  ALB1TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: VPC
    Properties:
      HealthCheckPath: /healthcheck
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 10
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC

  Web1InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - VPC
      - ALB1LoadBalancer
    Properties:
      GroupDescription: Enable HTTP access via port 80 and 443 restricted to the load balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          SourceSecurityGroupId: !Select
            - 0
            - !GetAtt ALB1LoadBalancer.SecurityGroups
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          SourceSecurityGroupId: !Select
            - 0
            - !GetAtt ALB1LoadBalancer.SecurityGroups
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: "0"
          ToPort: "65535"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref NamingPrefix
              - Instance
      VpcId: !Ref VPC

  WebAppAutoScalingGroup:
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: "true"
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - App1Subnet1
      - App1Subnet2
      - App1Subnet3
      - Web1LaunchConfig
      - ALB1TargetGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref App1Subnet1
        - !Ref App1Subnet2
        - !Ref App1Subnet3
      LaunchTemplate: 
        LaunchTemplateId: !Ref Web1LaunchConfig
        Version: !GetAtt Web1LaunchConfig.LatestVersionNumber
      MinSize: "3"
      MaxSize: !Ref Web1AutoScaleDesired
      DesiredCapacity: !Ref Web1AutoScaleDesired
      TargetGroupARNs:
        - !Ref ALB1TargetGroup
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}'
          PropagateAtLaunch: true

  Web1LaunchConfig:
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
      - Web1InstanceSecurityGroup
      - Web1InstanceInstanceProfile
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        IamInstanceProfile: 
          Arn: !GetAtt
            - Web1InstanceInstanceProfile
            - Arn
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !Ref Web1InstanceSecurityGroup
        UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash
            yum -y update
            sleep 30 # prevent "Error: Rpmdb changed underneath us"
            yum install python3 python-virtualenv python-pip unzip -y 
            python3 -m venv /home/ec2-user/venv
            source /home/ec2-user/venv/bin/activate
            mkdir -p /home/ec2-user/labestagio2025-realcloud
            mkdir -p /tmp/extraction_folder
            wget -O /tmp/repository.zip ${ServerCodeUrl}
            unzip -o /tmp/repository.zip -d /tmp/extraction_folder
            cp -r /tmp/extraction_folder/labestagio2025-realcloud-prod/. /home/ec2-user/labestagio2025-realcloud/
            python3 -m pip install -r /home/ec2-user/labestagio2025-realcloud/webserver/requirements.txt
            echo "Testing CodePipeline! v2" > /tmp/pipeline_log.log
            python3 /home/ec2-user/labestagio2025-realcloud/webserver/server.py -p 80 -r ${AWS::Region} -o ${ServerOperationMode}

  WebInstancePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy used by EC2 WebServers
      ManagedPolicyName: !Sub '${NamingPrefix}-EC2-Policy-${AWS::StackName}'
      Path: /
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ec2:DescribeInstanceStatus
            Resource: '*'
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource: '*'

  Web1InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${NamingPrefix}-EC2-Role-${AWS::StackName}'
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref WebInstancePolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: ddbReadOnly
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:Describe*
                  - dynamodb:List*
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: arn:aws:dynamodb:*:*:table/*

  Web2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${NamingPrefix}-EC2-noDDB-Role-${AWS::StackName}'
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref WebInstancePolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  Web1InstanceInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: Web1InstanceRole
    Properties:
      InstanceProfileName: !Sub '${NamingPrefix}-EC2-Role-${AWS::StackName}'
      Path: /Web1InstanceEc2Role/
      Roles:
        - !Ref Web1InstanceRole

  Web2InstanceInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: Web2InstanceRole
    Properties:
      InstanceProfileName: !Sub '${NamingPrefix}-EC2-noDDB-Role-${AWS::StackName}'
      Path: /Web2InstanceEc2Role/
      Roles:
        - !Ref Web2InstanceRole

  LoadDynamoDBLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${NamingPrefix}-Lambda-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ddbFull
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchWriteItem
                Resource: arn:aws:dynamodb:*:*:table/RecommendationService
        - PolicyName: cloudwatch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'

  LoadDynamoDBLambda:
    Type: AWS::Lambda::Function
    DependsOn: LoadDynamoDBLambdaRole
    Properties:
      FunctionName: LoadDynamoDBLambda
      Handler: index.handler
      Runtime: python3.12
      Timeout: "30"
      Role: !GetAtt LoadDynamoDBLambdaRole.Arn
      Code:
        ZipFile: !Sub "import boto3\nimport urllib.request\nimport cfnresponse\nimport logging\nimport signal\nimport json\nimport traceback\n\nLOGGER = logging.getLogger()\nLOGGER.setLevel(logging.INFO)\n\ndef populate_ddb_table():\n    # Get the service resource.\n    LOGGER.info('create client')\n    client = boto3.client('dynamodb', '${AWS::Region}')\n    \n    # @TODO, make bucket/object configurable\n    LOGGER.info('open file')\n    file = urllib.request.urlopen(\"https://aws-well-architected-labs-ohio.s3.us-east-2.amazonaws.com/Healthcheck/Data/RecommendationService.json\")\n    LOGGER.info('read file')\n    text = file.read()\n    LOGGER.info(text)\n    LOGGER.info('convert to JSON')\n    request_items = json.loads(text)\n    LOGGER.info('write to DDB')\n    response = client.batch_write_item(RequestItems=request_items)\n    LOGGER.info('DONE')\n    \n    # @TODO add error handling \n    \n    # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#DynamoDB.Client.batch_write_item\n\n\ndef handler(event, context):\n    signal.alarm(int((context.get_remaining_time_in_millis() / 1000) - 1))\n    # Setup alarm for remaining runtime minus a second\n    try:\n        LOGGER.info('EVENT RECEIVED: %s', event)\n        LOGGER.info('CONTEXT RECEIVED: %s', context)\n        if event['RequestType'] == 'Create':\n            LOGGER.info('CREATE')\n            populate_ddb_table()\n            cfnresponse.send(event, context, cfnresponse.SUCCESS,\n                {'Message': 'Resource creation successful!'})\n        elif event['RequestType'] == 'Update':\n            LOGGER.info('UPDATE')\n            populate_ddb_table()\n            cfnresponse.send(event, context, cfnresponse.SUCCESS,\n                {'Message': 'Resource update successful!'})\n        elif event['RequestType'] == 'Delete':\n            LOGGER.info('DELETE')\n            # do nothing, table will be deleted anyway\n            cfnresponse.send(event, context, cfnresponse.SUCCESS,\n                {'Message': 'Resource deletion successful!'})\n        else:\n            LOGGER.info('FAILED!')\n            cfnresponse.send(event, context, cfnresponse.FAILED,\n                {'Message': 'Unexpected event received from CloudFormation'})\n    except Exception as e:\n        LOGGER.info(str(traceback.format_exception_only(e.__class__, e)))\n        LOGGER.info('FAILED!')\n        cfnresponse.send(event, context, cfnresponse.FAILED, {\n            'Message': 'Exception during processing'})\n\ndef timeout_handler(_signal, _frame):\n    raise Exception('Time exceeded')\n\nsignal.signal(signal.SIGALRM, timeout_handler)\n"

  CustomResource:
    Type: Custom::LoadDynamoDB
    DependsOn:
      - LoadDynamoDBLambda
      - DynamoDBServiceMockTable
    Properties:
      ServiceToken: !GetAtt LoadDynamoDBLambda.Arn
      DynamoTableName: !Ref DynamoDBServiceMockTable

  RecommendationServiceEnabled:
    Type: AWS::SSM::Parameter
    Properties:
      AllowedPattern: ^(true|false)$
      Description: switch used to enable/disable the mocked RecommendationService
      Name: RecommendationServiceEnabled
      Tier: Standard
      Type: String
      Value: "true"

Outputs:
  WebsiteURL:
    Description: Static Website
    Value: !Join
      - ""
      - - http://
        - !GetAtt ALB1LoadBalancer.DNSName
        - /
  AppVPC:
    Description: VPC
    Value: !Ref VPC
  AppVPCIPv4CIDR:
    Description: VPC CIDR for IPv4
    Value: !GetAtt VPC.CidrBlock
  AppVPCFlowLogsArn:
    Description: ARN of VPC Flow Logs Group
    Value: !GetAtt VPCFlowLogGroup.Arn
  #ALB1:
  ALB1Subnet1:
    Condition: ALB1Enabled
    Description: ALB1Subnet1
    Value: !Ref ALB1Subnet1
  ALB1Subnet2:
    Condition: ALB1Enabled
    Description: ALB1Subnet2
    Value: !Ref ALB1Subnet2
  ALB1Subnet3:
    Condition: ALB1Enabled
    Description: ALB1Subnet3
    Value: !Ref ALB1Subnet3
  #App1:
  App1Subnet1:
    Description: App1Subnet1
    Value: !Ref App1Subnet1
  App1Subnet2:
    Description: App1Subnet2
    Value: !Ref App1Subnet2
  App1Subnet3:
    Description: App1Subnet3
    Value: !Ref App1Subnet3
  #DB1:
  DB1Subnet1:
    Condition: DB1Enabled
    Description: DB1Subnet1
    Value: !Ref DB1Subnet1
  DB1Subnet2:
    Condition: DB1Enabled
    Description: DB1Subnet2
    Value: !Ref DB1Subnet2
  DB1Subnet3:
    Condition: DB1Enabled
    Description: DB1Subnet3
    Value: !Ref DB1Subnet3
  #Shared1:
  Shared1Subnet1:
    Condition: Shared1Enabled
    Description: Shared1Subnet1
    Value: !Ref Shared1Subnet1
  Shared1Subnet2:
    Condition: Shared1Enabled
    Description: Shared1Subnet2
    Value: !Ref Shared1Subnet2
  Shared1Subnet3:
    Condition: Shared1Enabled
    Description: Shared1Subnet3
    Value: !Ref Shared1Subnet3

Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "General Configuration"
        Parameters:
          - NamingPrefix
          - VPCIPv4CidrBlock
          - VPCSubnetIPv4Size
          - VPCNumberOfIPv4Subnets
          - VPCFlowLogRetention
      - 
        Label: 
          default: "Application Load Balancer Tier"
        Parameters: 
          - ALB1SubnetsEnabled
      - 
        Label: 
          default: "Application Tier"
        Parameters: 
          - App1SubnetsInternetRoute
          - App1SubnetsPrivateLinkEndpoints
          - InstanceType
          - LatestAmiId
          - ServerCodeUrl
          - ServerOperationMode
          - Web1AutoScaleDesired
          - ALBSGSource
      - 
        Label: 
          default: "Database Tier"
        Parameters: 
          - DB1SubnetsEnabled
          - DB1TCPPortNumber
      - 
        Label: 
          default: "Shared Tier"
        Parameters: 
          - Shared1SubnetsEnabled